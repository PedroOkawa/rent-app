package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "FEATURE".
 */
public class Feature {

    private Long id;
    private Long advertisementId;
    private String description;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FeatureDao myDao;

    private Advertisement advertisement;
    private Long advertisement__resolvedKey;


    public Feature() {
    }

    public Feature(Long id) {
        this.id = id;
    }

    public Feature(Long id, Long advertisementId, String description) {
        this.id = id;
        this.advertisementId = advertisementId;
        this.description = description;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFeatureDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getAdvertisementId() {
        return advertisementId;
    }

    public void setAdvertisementId(Long advertisementId) {
        this.advertisementId = advertisementId;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /** To-one relationship, resolved on first access. */
    public Advertisement getAdvertisement() {
        Long __key = this.id;
        if (advertisement__resolvedKey == null || !advertisement__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AdvertisementDao targetDao = daoSession.getAdvertisementDao();
            Advertisement advertisementNew = targetDao.load(__key);
            synchronized (this) {
                advertisement = advertisementNew;
            	advertisement__resolvedKey = __key;
            }
        }
        return advertisement;
    }

    public void setAdvertisement(Advertisement advertisement) {
        synchronized (this) {
            this.advertisement = advertisement;
            id = advertisement == null ? null : advertisement.getId();
            advertisement__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
