package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Advertisement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADVERTISEMENT".
*/
public class AdvertisementDao extends AbstractDao<Advertisement, Long> {

    public static final String TABLENAME = "ADVERTISEMENT";

    /**
     * Properties of entity Advertisement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property PropertyType = new Property(2, String.class, "propertyType", false, "PROPERTY_TYPE");
        public final static Property HouseType = new Property(3, String.class, "houseType", false, "HOUSE_TYPE");
        public final static Property SellingType = new Property(4, String.class, "sellingType", false, "SELLING_TYPE");
        public final static Property PriceType = new Property(5, String.class, "priceType", false, "PRICE_TYPE");
        public final static Property Agreed = new Property(6, Integer.class, "agreed", false, "AGREED");
        public final static Property Priority = new Property(7, Integer.class, "priority", false, "PRIORITY");
        public final static Property Description = new Property(8, String.class, "description", false, "DESCRIPTION");
        public final static Property Price = new Property(9, Integer.class, "price", false, "PRICE");
        public final static Property Bedrooms = new Property(10, Integer.class, "bedrooms", false, "BEDROOMS");
        public final static Property Bathrooms = new Property(11, Integer.class, "bathrooms", false, "BATHROOMS");
        public final static Property SquareMeters = new Property(12, Float.class, "squareMeters", false, "SQUARE_METERS");
        public final static Property Acres = new Property(13, Float.class, "acres", false, "ACRES");
        public final static Property FullAddress = new Property(14, String.class, "fullAddress", false, "FULL_ADDRESS");
        public final static Property GeneralArea = new Property(15, String.class, "generalArea", false, "GENERAL_AREA");
        public final static Property Latitude = new Property(16, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(17, Double.class, "longitude", false, "LONGITUDE");
        public final static Property AgencyName = new Property(18, String.class, "agencyName", false, "AGENCY_NAME");
        public final static Property ContactName = new Property(19, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property PhoneOne = new Property(20, String.class, "phoneOne", false, "PHONE_ONE");
        public final static Property PhoneTwo = new Property(21, String.class, "phoneTwo", false, "PHONE_TWO");
        public final static Property PhoneInfo = new Property(22, String.class, "phoneInfo", false, "PHONE_INFO");
        public final static Property EmailMain = new Property(23, String.class, "emailMain", false, "EMAIL_MAIN");
        public final static Property EmailCC = new Property(24, String.class, "emailCC", false, "EMAIL_CC");
        public final static Property StartDate = new Property(25, Long.class, "startDate", false, "START_DATE");
        public final static Property ListingDate = new Property(26, Long.class, "listingDate", false, "LISTING_DATE");
        public final static Property AgreedDate = new Property(27, Long.class, "agreedDate", false, "AGREED_DATE");
        public final static Property ImageSmall = new Property(28, String.class, "imageSmall", false, "IMAGE_SMALL");
        public final static Property ImageMedium = new Property(29, String.class, "imageMedium", false, "IMAGE_MEDIUM");
        public final static Property ImageLarge = new Property(30, String.class, "imageLarge", false, "IMAGE_LARGE");
    };

    private DaoSession daoSession;


    public AdvertisementDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertisementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADVERTISEMENT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"PROPERTY_TYPE\" TEXT," + // 2: propertyType
                "\"HOUSE_TYPE\" TEXT," + // 3: houseType
                "\"SELLING_TYPE\" TEXT," + // 4: sellingType
                "\"PRICE_TYPE\" TEXT," + // 5: priceType
                "\"AGREED\" INTEGER," + // 6: agreed
                "\"PRIORITY\" INTEGER," + // 7: priority
                "\"DESCRIPTION\" TEXT," + // 8: description
                "\"PRICE\" INTEGER," + // 9: price
                "\"BEDROOMS\" INTEGER," + // 10: bedrooms
                "\"BATHROOMS\" INTEGER," + // 11: bathrooms
                "\"SQUARE_METERS\" REAL," + // 12: squareMeters
                "\"ACRES\" REAL," + // 13: acres
                "\"FULL_ADDRESS\" TEXT," + // 14: fullAddress
                "\"GENERAL_AREA\" TEXT," + // 15: generalArea
                "\"LATITUDE\" REAL," + // 16: latitude
                "\"LONGITUDE\" REAL," + // 17: longitude
                "\"AGENCY_NAME\" TEXT," + // 18: agencyName
                "\"CONTACT_NAME\" TEXT," + // 19: contactName
                "\"PHONE_ONE\" TEXT," + // 20: phoneOne
                "\"PHONE_TWO\" TEXT," + // 21: phoneTwo
                "\"PHONE_INFO\" TEXT," + // 22: phoneInfo
                "\"EMAIL_MAIN\" TEXT," + // 23: emailMain
                "\"EMAIL_CC\" TEXT," + // 24: emailCC
                "\"START_DATE\" INTEGER," + // 25: startDate
                "\"LISTING_DATE\" INTEGER," + // 26: listingDate
                "\"AGREED_DATE\" INTEGER," + // 27: agreedDate
                "\"IMAGE_SMALL\" TEXT," + // 28: imageSmall
                "\"IMAGE_MEDIUM\" TEXT," + // 29: imageMedium
                "\"IMAGE_LARGE\" TEXT);"); // 30: imageLarge
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADVERTISEMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Advertisement entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String propertyType = entity.getPropertyType();
        if (propertyType != null) {
            stmt.bindString(3, propertyType);
        }
 
        String houseType = entity.getHouseType();
        if (houseType != null) {
            stmt.bindString(4, houseType);
        }
 
        String sellingType = entity.getSellingType();
        if (sellingType != null) {
            stmt.bindString(5, sellingType);
        }
 
        String priceType = entity.getPriceType();
        if (priceType != null) {
            stmt.bindString(6, priceType);
        }
 
        Integer agreed = entity.getAgreed();
        if (agreed != null) {
            stmt.bindLong(7, agreed);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(8, priority);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(10, price);
        }
 
        Integer bedrooms = entity.getBedrooms();
        if (bedrooms != null) {
            stmt.bindLong(11, bedrooms);
        }
 
        Integer bathrooms = entity.getBathrooms();
        if (bathrooms != null) {
            stmt.bindLong(12, bathrooms);
        }
 
        Float squareMeters = entity.getSquareMeters();
        if (squareMeters != null) {
            stmt.bindDouble(13, squareMeters);
        }
 
        Float acres = entity.getAcres();
        if (acres != null) {
            stmt.bindDouble(14, acres);
        }
 
        String fullAddress = entity.getFullAddress();
        if (fullAddress != null) {
            stmt.bindString(15, fullAddress);
        }
 
        String generalArea = entity.getGeneralArea();
        if (generalArea != null) {
            stmt.bindString(16, generalArea);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(17, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(18, longitude);
        }
 
        String agencyName = entity.getAgencyName();
        if (agencyName != null) {
            stmt.bindString(19, agencyName);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(20, contactName);
        }
 
        String phoneOne = entity.getPhoneOne();
        if (phoneOne != null) {
            stmt.bindString(21, phoneOne);
        }
 
        String phoneTwo = entity.getPhoneTwo();
        if (phoneTwo != null) {
            stmt.bindString(22, phoneTwo);
        }
 
        String phoneInfo = entity.getPhoneInfo();
        if (phoneInfo != null) {
            stmt.bindString(23, phoneInfo);
        }
 
        String emailMain = entity.getEmailMain();
        if (emailMain != null) {
            stmt.bindString(24, emailMain);
        }
 
        String emailCC = entity.getEmailCC();
        if (emailCC != null) {
            stmt.bindString(25, emailCC);
        }
 
        Long startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(26, startDate);
        }
 
        Long listingDate = entity.getListingDate();
        if (listingDate != null) {
            stmt.bindLong(27, listingDate);
        }
 
        Long agreedDate = entity.getAgreedDate();
        if (agreedDate != null) {
            stmt.bindLong(28, agreedDate);
        }
 
        String imageSmall = entity.getImageSmall();
        if (imageSmall != null) {
            stmt.bindString(29, imageSmall);
        }
 
        String imageMedium = entity.getImageMedium();
        if (imageMedium != null) {
            stmt.bindString(30, imageMedium);
        }
 
        String imageLarge = entity.getImageLarge();
        if (imageLarge != null) {
            stmt.bindString(31, imageLarge);
        }
    }

    @Override
    protected void attachEntity(Advertisement entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Advertisement readEntity(Cursor cursor, int offset) {
        Advertisement entity = new Advertisement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // propertyType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // houseType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sellingType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // priceType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // agreed
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // priority
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // description
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // bedrooms
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // bathrooms
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // squareMeters
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // acres
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fullAddress
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // generalArea
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // latitude
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // longitude
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // agencyName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // contactName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // phoneOne
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // phoneTwo
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // phoneInfo
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // emailMain
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // emailCC
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25), // startDate
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // listingDate
            cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27), // agreedDate
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // imageSmall
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // imageMedium
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // imageLarge
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Advertisement entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPropertyType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHouseType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSellingType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPriceType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAgreed(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPriority(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDescription(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrice(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBedrooms(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBathrooms(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSquareMeters(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setAcres(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setFullAddress(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGeneralArea(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLatitude(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setLongitude(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setAgencyName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setContactName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPhoneOne(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPhoneTwo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPhoneInfo(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setEmailMain(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setEmailCC(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setStartDate(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
        entity.setListingDate(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setAgreedDate(cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27));
        entity.setImageSmall(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setImageMedium(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setImageLarge(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Advertisement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Advertisement entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
