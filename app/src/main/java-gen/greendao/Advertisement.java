package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import com.google.gson.annotations.SerializedName;
// KEEP INCLUDES END
/**
 * Entity mapped to table "ADVERTISEMENT".
 */
public class Advertisement {

    // KEEP FIELDS - put your custom fields here

    @SerializedName("ad_id")
    private Long id;
    @SerializedName("daft_url")
    private String url;
    @SerializedName("property_type")
    private String propertyType;
    @SerializedName("house_type")
    private String houseType;
    @SerializedName("selling_type")
    private String sellingType;
    @SerializedName("price_type")
    private String priceType;
    private Integer agreed;
    private Integer priority;
    private String description;
    private Integer price;
    private Integer bedrooms;
    private Integer bathrooms;
    @SerializedName("square_meters")
    private Float squareMeters;
    private Float acres;
    @SerializedName("full_address")
    private String fullAddress;
    @SerializedName("general_area")
    private String generalArea;
    private Double latitude;
    private Double longitude;
    @SerializedName("agency_name")
    private String agencyName;
    @SerializedName("contact_name")
    private String contactName;
    @SerializedName("phone1")
    private String phoneOne;
    @SerializedName("phone2")
    private String phoneTwo;
    @SerializedName("phone_info")
    private String phoneInfo;
    @SerializedName("main_email")
    private String emailMain;
    @SerializedName("cc_email")
    private String emailCC;
    @SerializedName("start_date")
    private Long startDate;
    @SerializedName("listing_date")
    private Long listingDate;
    @SerializedName("agreed_date")
    private Long agreedDate;
    @SerializedName("small_thumbnail_url")
    private String imageSmall;
    @SerializedName("medium_thumbnail_url")
    private String imageMedium;
    @SerializedName("large_thumbnail_url")
    private String imageLarge;

    // KEEP FIELDS END

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AdvertisementDao myDao;

    private List<Feature> featureList;

    public Advertisement() {
    }

    public Advertisement(Long id) {
        this.id = id;
    }

    public Advertisement(Long id, String url, String propertyType, String houseType, String sellingType, String priceType, Integer agreed, Integer priority, String description, Integer price, Integer bedrooms, Integer bathrooms, Float squareMeters, Float acres, String fullAddress, String generalArea, Double latitude, Double longitude, String agencyName, String contactName, String phoneOne, String phoneTwo, String phoneInfo, String emailMain, String emailCC, Long startDate, Long listingDate, Long agreedDate, String imageSmall, String imageMedium, String imageLarge) {
        this.id = id;
        this.url = url;
        this.propertyType = propertyType;
        this.houseType = houseType;
        this.sellingType = sellingType;
        this.priceType = priceType;
        this.agreed = agreed;
        this.priority = priority;
        this.description = description;
        this.price = price;
        this.bedrooms = bedrooms;
        this.bathrooms = bathrooms;
        this.squareMeters = squareMeters;
        this.acres = acres;
        this.fullAddress = fullAddress;
        this.generalArea = generalArea;
        this.latitude = latitude;
        this.longitude = longitude;
        this.agencyName = agencyName;
        this.contactName = contactName;
        this.phoneOne = phoneOne;
        this.phoneTwo = phoneTwo;
        this.phoneInfo = phoneInfo;
        this.emailMain = emailMain;
        this.emailCC = emailCC;
        this.startDate = startDate;
        this.listingDate = listingDate;
        this.agreedDate = agreedDate;
        this.imageSmall = imageSmall;
        this.imageMedium = imageMedium;
        this.imageLarge = imageLarge;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdvertisementDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getPropertyType() {
        return propertyType;
    }

    public void setPropertyType(String propertyType) {
        this.propertyType = propertyType;
    }

    public String getHouseType() {
        return houseType;
    }

    public void setHouseType(String houseType) {
        this.houseType = houseType;
    }

    public String getSellingType() {
        return sellingType;
    }

    public void setSellingType(String sellingType) {
        this.sellingType = sellingType;
    }

    public String getPriceType() {
        return priceType;
    }

    public void setPriceType(String priceType) {
        this.priceType = priceType;
    }

    public Integer getAgreed() {
        return agreed;
    }

    public void setAgreed(Integer agreed) {
        this.agreed = agreed;
    }

    public Integer getPriority() {
        return priority;
    }

    public void setPriority(Integer priority) {
        this.priority = priority;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getPrice() {
        return price;
    }

    public void setPrice(Integer price) {
        this.price = price;
    }

    public Integer getBedrooms() {
        return bedrooms;
    }

    public void setBedrooms(Integer bedrooms) {
        this.bedrooms = bedrooms;
    }

    public Integer getBathrooms() {
        return bathrooms;
    }

    public void setBathrooms(Integer bathrooms) {
        this.bathrooms = bathrooms;
    }

    public Float getSquareMeters() {
        return squareMeters;
    }

    public void setSquareMeters(Float squareMeters) {
        this.squareMeters = squareMeters;
    }

    public Float getAcres() {
        return acres;
    }

    public void setAcres(Float acres) {
        this.acres = acres;
    }

    public String getFullAddress() {
        return fullAddress;
    }

    public void setFullAddress(String fullAddress) {
        this.fullAddress = fullAddress;
    }

    public String getGeneralArea() {
        return generalArea;
    }

    public void setGeneralArea(String generalArea) {
        this.generalArea = generalArea;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public String getAgencyName() {
        return agencyName;
    }

    public void setAgencyName(String agencyName) {
        this.agencyName = agencyName;
    }

    public String getContactName() {
        return contactName;
    }

    public void setContactName(String contactName) {
        this.contactName = contactName;
    }

    public String getPhoneOne() {
        return phoneOne;
    }

    public void setPhoneOne(String phoneOne) {
        this.phoneOne = phoneOne;
    }

    public String getPhoneTwo() {
        return phoneTwo;
    }

    public void setPhoneTwo(String phoneTwo) {
        this.phoneTwo = phoneTwo;
    }

    public String getPhoneInfo() {
        return phoneInfo;
    }

    public void setPhoneInfo(String phoneInfo) {
        this.phoneInfo = phoneInfo;
    }

    public String getEmailMain() {
        return emailMain;
    }

    public void setEmailMain(String emailMain) {
        this.emailMain = emailMain;
    }

    public String getEmailCC() {
        return emailCC;
    }

    public void setEmailCC(String emailCC) {
        this.emailCC = emailCC;
    }

    public Long getStartDate() {
        return startDate;
    }

    public void setStartDate(Long startDate) {
        this.startDate = startDate;
    }

    public Long getListingDate() {
        return listingDate;
    }

    public void setListingDate(Long listingDate) {
        this.listingDate = listingDate;
    }

    public Long getAgreedDate() {
        return agreedDate;
    }

    public void setAgreedDate(Long agreedDate) {
        this.agreedDate = agreedDate;
    }

    public String getImageSmall() {
        return imageSmall;
    }

    public void setImageSmall(String imageSmall) {
        this.imageSmall = imageSmall;
    }

    public String getImageMedium() {
        return imageMedium;
    }

    public void setImageMedium(String imageMedium) {
        this.imageMedium = imageMedium;
    }

    public String getImageLarge() {
        return imageLarge;
    }

    public void setImageLarge(String imageLarge) {
        this.imageLarge = imageLarge;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Feature> getFeatureList() {
        if (featureList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FeatureDao targetDao = daoSession.getFeatureDao();
            List<Feature> featureListNew = targetDao._queryAdvertisement_FeatureList(id);
            synchronized (this) {
                if(featureList == null) {
                    featureList = featureListNew;
                }
            }
        }
        return featureList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFeatureList() {
        featureList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
