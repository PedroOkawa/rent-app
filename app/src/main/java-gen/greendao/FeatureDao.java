package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Feature;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEATURE".
*/
public class FeatureDao extends AbstractDao<Feature, Long> {

    public static final String TABLENAME = "FEATURE";

    /**
     * Properties of entity Feature.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property AdvertisementId = new Property(1, Long.class, "advertisementId", false, "ADVERTISEMENT_ID");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
    };

    private Query<Feature> advertisement_FeatureListQuery;

    public FeatureDao(DaoConfig config) {
        super(config);
    }
    
    public FeatureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEATURE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADVERTISEMENT_ID\" INTEGER," + // 1: advertisementId
                "\"DESCRIPTION\" TEXT);"); // 2: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEATURE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Feature entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long advertisementId = entity.getAdvertisementId();
        if (advertisementId != null) {
            stmt.bindLong(2, advertisementId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Feature readEntity(Cursor cursor, int offset) {
        Feature entity = new Feature( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // advertisementId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Feature entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdvertisementId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Feature entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Feature entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "featureList" to-many relationship of Advertisement. */
    public List<Feature> _queryAdvertisement_FeatureList(Long advertisementId) {
        synchronized (this) {
            if (advertisement_FeatureListQuery == null) {
                QueryBuilder<Feature> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AdvertisementId.eq(null));
                advertisement_FeatureListQuery = queryBuilder.build();
            }
        }
        Query<Feature> query = advertisement_FeatureListQuery.forCurrentThread();
        query.setParameter(0, advertisementId);
        return query.list();
    }

}
